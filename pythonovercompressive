import numpy as np
from numpy.polynomial import Polynomial
import math
from scipy.integrate import quad
import matplotlib.pyplot as plt

#Initialize vars. u_l, rho_l should be constant while u_r, rho_r will be tested at different values
rhobar = 3
rho_l = 2
u_l = 2.5
a_exp = -1.5
aconst = .05

# Define a(t)
# def a(t):
#     return aconst  # You can change this to any function of t
#
# # Define integral of a(s) from 0 to t (best to do this manually if possible, but could use quad or something)
def A(t):
    if t==0:
        return 0
    else:
        return aconst * t

def domega2 (rho_r,u_r, u_delta,t):
    # if rho_l-rho_r==0:
    #     return "nan"
    #else:
        dw = (-(rho_l-rho_r) * u_delta
            + (rho_l*(u_l + A(t)) * (1 - (rho_l / rhobar)**a_exp)
               - (rho_r * (u_r + A(t))* (1-(rho_r/rhobar)**a_exp))))

        return dw

#Updated udelta [INCOMPLETE, INCLUDE DIVIDE BY 0 CHECKS]
def du_delta(rho_r, u_r, u_delta, omega2,domega2):

    du = (1/omega2) * (-(rho_l*u_l - rho_r*u_r)*u_delta
                       + (rho_l*u_l*(u_l + A(t))*(1-(rho_l/rhobar)**a_exp) - rho_r*u_r*(u_r + A(t))*(1-(rho_r/rhobar)**a_exp)) - domega2*u_delta)

    return du

#initial value for udelta
def udelta_t0(rho_r,u_r):

    a = rho_l - rho_r
    b = -(((rho_l*u_l - rho_l*u_l*(rho_l/rhobar)**a_exp) - (rho_r*u_r - rho_r*u_r*(rho_r/rhobar)**a_exp)) + (rho_l*u_l - rho_r*u_r))
    c = (rho_l*u_l**2 - rho_l*u_l**2 * (rho_l/rhobar)**a_exp) - (rho_r*u_r**2 - rho_r*u_r**2 * (rho_r/rhobar)**a_exp)

    p = Polynomial([c,b,a])
    r = p.roots()

    if rho_r<rho_l:
        return min(r)
    else:
        return max(r)

#lower bound
def lower_bound(x, y, t):
    return max(
        -(y +A(t)) * ((1 + a_exp)*((x/rhobar)**a_exp) - 1),
        -(y +A(t)) * (((x/rhobar)**a_exp) - 1)
    )


#Upper bound
def upper_bound(t):
    return min(
        -(u_l +A(t)) * ((1 + a_exp)*((rho_l/rhobar)**a_exp) - 1), #Lambda 1
        -(u_l +A(t)) * (((rho_l/rhobar)**a_exp) - 1) # Lambda 2
    )

#Max and min values of rho_r and u_r to run
u_start = -10
u_end = 2
rho_start = 1e-3
rho_end = 6

#Create space for u_r, rho_r
u_r = np.linspace(u_start,u_end,200)
rho_r = np.linspace(rho_start,rho_end,200) #These don't technically need to be the same size

#Plot shocks and stuff
plotX = np.linspace(1e-3,20,200)
plotX1 = np.linspace(1e-3,rhobar,int(200*rhobar/20))
plotX2 = np.linspace(rhobar,20,int(200-(200*rhobar/20)))

def Shocks(t):

    u1 = u_l * np.ones(len(plotX))
    u2 = (((rho_l**a_exp) - (plotX**a_exp))/((plotX**a_exp) - (rhobar**a_exp))) * (u_l + A(t)) + u_l

    u2first = ((rho_l**a_exp - plotX1**a_exp)/(plotX1**a_exp - rhobar**a_exp)) * (u_l + A(t)) + u_l
    u2second = (((rho_l**a_exp) - (plotX2**a_exp))/((plotX2**a_exp) - (rhobar**a_exp))) * (u_l + A(t)) + u_l

    return [u2first, u2second]

#####tspace#####
#Not used right now, but could change code to make tspace a range between init and end.
# tinit = 0
# tend = 2

tspace = [0,10,20] #Each value of t we want to check. These should be evenly spaced and in ascending order for now
eventstep = tspace[1]

#########Euler approximation stuff.###########
n = 200 #number of steps to take in euler approx. Increase n to get better accuracy and way slower calculation
step = 1/n #stepsize in euler approx.
eulerspace = np.linspace(0,eventstep,n+1)

#Structure for storing successful values. Each index of successpts corresponds to the time. successpts[t..][0] corresponds to successful rho values for each t, [t..][1] corresponds to u values
successpts = [[[],[]] for t in tspace]

############## Main loop 6/30 #####################
for u in u_r:
    for rho in rho_r:

            #initial vals
        u_deltatemp = udelta_t0(rho,u)
        omega2temp = 0

            #Run through approximation along each t in tspace
        for t in tspace:
                #Stop the loop once a value at each u is found (so fewer points need to be checked.) When on, only the leftmost value of each successful point for each u will be shown. Comment out to see a filled in region.
            if u in successpts[tspace.index(t)][1]:
                continue

                #t=0 case
            if t==0:
                if upper_bound(t) > (u_deltatemp + A(t)) > lower_bound(rho,u,t):
                    successpts[0][0].append(rho)
                    successpts[0][1].append(u)

            #All t greater than 0 will run through euler approximation
            else:
                for i in eulerspace - eulerspace[0]: #Bridges between each value of t. Skip first i in euler (because it will be 0)
                    tnow = t-eventstep+i #update time for each step in euler
                    omega2temp = omega2temp + step * domega2(rho,u,u_deltatemp,tnow) #update omega
                    u_deltatemp = u_deltatemp + step * du_delta(rho,u,u_deltatemp,omega2temp,domega2(rho,u,u_deltatemp,tnow)) #update udelta

                    #Check final value from euler approx against bounds. Store point if successful
                if upper_bound(t) > u_deltatemp + A(t) > lower_bound(rho,u,t):
                    successpts[tspace.index(t)][0].append(rho)
                    successpts[tspace.index(t)][1].append(u)

############PLOT##############

#Set bounds of graphs
xmin = 0
xmax = rho_end
ymax = 5
ymin = -10

title = "Region of Overcompression when t="
message = "a = " + str(a_exp) + ", a(t) = " + str(aconst)
if u_l > 0:
    message += ", uL > 0, "
else:
    message+= ", uL < 0, "

if rho_l > rhobar:
    message += "rhoL > rhobar"
else:
    message += "rhoL < rhobar"

print(message)

#Plots for each t
for t in tspace:
    plt.figure(facecolor = 'white')
    ax=plt.gca()
    ax.set_facecolor('white')
    plt.title(title+str(t))
    plt.scatter(successpts[tspace.index(t)][0], successpts[tspace.index(t)][1], s=2)
    plt.axhline(y=0, color = 'darkblue')
    plt.axvline(x=0, color = 'darkblue')
    plt.axvline(x = rhobar, linestyle = 'dashed', color = 'red')
    plt.plot(plotX1,Shocks(t)[0], linestyle = 'dashed', color = 'purple')
    plt.plot(plotX2,Shocks(t)[1], linestyle = 'dashed', color = 'purple')
    plt.ylim(ymin,ymax)
    plt.xlim(xmin,xmax)
    plt.xlabel("ρ")
    plt.ylabel("u")

    plt.grid(True)
    #plt.savefig("C:\\Users\\ayres\\Desktop\\WVU REU Summer 2025\\Graphs\\Region of Overcompression when t="+str(t)+".png") #save figures
    plt.show()

#Improvements to make:
#right now, each time needs to be tested in the same bounds which makes the code a lot less efficient (because large bounds may need to be tested to get all the info)
#pl=rhobar not working
